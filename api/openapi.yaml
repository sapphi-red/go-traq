openapi: 3.0.0
info:
  title: traQ API
  version: 2.6.3
servers:
- description: production environment
  url: https://q.trap.jp/api/1.0
- description: staging environment
  url: https://traq-dev.tokyotech.org/api/1.0
security:
- cookieAuth: []
paths:
  /login:
    post:
      description: ログインを行います。リダイレクトパラメーターが存在する場合はログイン後にリダイレクトします
      parameters:
      - description: リダイレクト先
        explode: true
        in: query
        name: redirect
        required: false
        schema:
          type: string
        style: form
      requestBody:
        $ref: '#/components/requestBodies/inline_object'
        content:
          application/json:
            schema:
              properties:
                name:
                  type: string
                pass:
                  type: string
              required:
              - name
              - pass
              type: object
      responses:
        204:
          description: 正常にログインできました。
        302:
          description: 正常にログインできました。リダイレクトします。
        400:
          description: ログインできませんでした。リクエスト内容が不正です
        401:
          description: ログインできませんでした。認証情報が間違っています
        403:
          description: ログインできませんでした。アカウントに問題があります
      security: []
      tags:
      - authentication
  /logout:
    post:
      description: ログアウトを行います。リダイレクトパラメーターが存在する場合はログアウト後にリダイレクトします
      parameters:
      - description: リダイレクト先
        explode: true
        in: query
        name: redirect
        required: false
        schema:
          type: string
        style: form
      responses:
        204:
          description: 正常にログアウトできました。
        302:
          description: 正常にログアウトできました。リダイレクトします。
      security: []
      tags:
      - authentication
  /public/icon/{username}:
    get:
      description: 指定したユーザーのアイコン画像を取得します。
      responses:
        200:
          content:
            image/jpeg:
              schema:
                format: binary
                type: string
            image/png:
              schema:
                format: binary
                type: string
            image/gif:
              schema:
                format: binary
                type: string
          description: 正常に取得できました。
        404:
          description: 取得できませんでした。指定したユーザーは存在しません。
      security: []
      tags:
      - public
  /oauth2/authorize:
    get:
      description: OAuth2 認可エンドポイント
      parameters:
      - explode: true
        in: query
        name: response_type
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: client_id
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: redirect_uri
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: scope
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: state
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: code_challenge
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: code_challenge_method
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: nonce
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: prompt
        required: false
        schema:
          type: string
        style: form
      responses:
        302:
          description: 結果に応じてリダイレクトします。
        400:
          description: リクエストが不正です。
        403:
          description: リクエストが許可されていません。
      security: []
      tags:
      - authorization
    post:
      description: OAuth2 認可エンドポイント
      requestBody:
        $ref: '#/components/requestBodies/inline_object_1'
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                response_type:
                  type: string
                client_id:
                  type: string
                redirect_uri:
                  type: string
                scope:
                  type: string
                state:
                  type: string
                code_challenge:
                  type: string
                code_challenge_method:
                  type: string
                nonce:
                  type: string
                prompt:
                  type: string
              type: object
      responses:
        302:
          description: 結果に応じてリダイレクトします。
        400:
          description: リクエストが不正です。
        403:
          description: リクエストが許可されていません。
      security: []
      tags:
      - authorization
  /oauth2/authorize/decide:
    post:
      description: OAuth2 認可承諾
      requestBody:
        $ref: '#/components/requestBodies/inline_object_2'
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                submit:
                  description: 承諾する場合は"approve"
                  type: string
              required:
              - submit
              type: object
      responses:
        302:
          description: RedirectURIに結果をリダイレクトします。
        400:
          description: リクエストが不正です。
        403:
          description: リクエストが許可されていません。
      tags:
      - authorization
  /oauth2/token:
    post:
      description: OAuth2 トークンエンドポイント
      requestBody:
        $ref: '#/components/requestBodies/inline_object_3'
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                grant_type:
                  type: string
                code:
                  type: string
                redirect_uri:
                  type: string
                client_id:
                  type: string
                code_verifier:
                  type: string
                username:
                  type: string
                password:
                  type: string
                scope:
                  type: string
                refresh_token:
                  type: string
                client_secret:
                  type: string
              required:
              - grant_type
              type: object
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200'
          description: トークンが正常に発行されました。
        400:
          description: トークン発行に失敗しました。
        403:
          description: トークン発行に失敗しました。
      security: []
      tags:
      - authorization
  /users:
    get:
      description: 全ユーザーのリストを取得します。
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserList'
          description: |
            正常に取得できました。
            ユーザーリストを返します。
      security:
      - traqOAuth2:
        - read
        - manage_bot
      tags:
      - user
    post:
      description: ユーザー登録します
      requestBody:
        $ref: '#/components/requestBodies/inline_object_4'
        content:
          application/json:
            schema:
              properties:
                name:
                  description: ユーザー名(半角英数字とアンダーバー(_)の1文字以上32文字以下)
                  type: string
                password:
                  description: パスワード
                  format: password
                  type: string
              required:
              - name
              - password
              type: object
      responses:
        201:
          description: 正常に登録できました。
        400:
          description: 登録できませんでした。リクエスト内容が不正です。
        403:
          description: 登録できませんでした。権限がありません。
      tags:
      - user
  /users/me:
    get:
      description: 自分のユーザー情報を取得します。
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Me'
          description: 正常に取得できました。
      security:
      - traqOAuth2:
        - read
        - manage_bot
      tags:
      - user
    patch:
      description: 自分のユーザー情報を変更します。
      requestBody:
        $ref: '#/components/requestBodies/inline_object_5'
        content:
          application/json:
            schema:
              properties:
                displayName:
                  description: 新しい表示名(0-32文字)。変更しない場合は""
                  type: string
                twitterId:
                  description: TwitterID
                  type: string
              type: object
      responses:
        204:
          description: 正常に変更できました。
        400:
          description: 正常に変更できませんでした。リクエスト内容が不正です。
      security:
      - traqOAuth2:
        - write
      tags:
      - user
  /users/me/password:
    put:
      description: 自分のパスワードを変更します。
      requestBody:
        $ref: '#/components/requestBodies/inline_object_6'
        content:
          application/json:
            schema:
              properties:
                password:
                  description: 現在のパスワード
                  type: string
                newPassword:
                  description: 新しいパスワード(10文字以上32文字以下のアスキー文字)
                  type: string
              required:
              - newPassword
              - password
              type: object
      responses:
        204:
          description: 正常に変更できました。
        400:
          description: 正常に変更できませんでした。リクエスト内容が不正です
        401:
          description: 正常に変更できませんでした。現在のパスワードが違います。
      tags:
      - user
  /users/me/qr-code:
    get:
      description: 自分のQRコードを取得します。
      responses:
        200:
          content:
            image/png:
              schema:
                format: binary
                type: string
          description: 正常に取得できました。
      tags:
      - user
  /users/me/icon:
    get:
      description: 自分のアイコン画像を取得します。
      responses:
        200:
          content:
            image/jpeg:
              schema:
                format: binary
                type: string
            image/png:
              schema:
                format: binary
                type: string
            image/gif:
              schema:
                format: binary
                type: string
          description: 正常に取得できました。
      security:
      - traqOAuth2:
        - read
      tags:
      - user
    put:
      description: 自分のアイコンを更新します。
      requestBody:
        content:
          multipart/form-data:
            encoding:
              file:
                contentType: image/png, image/jpeg, image/gif
                style: form
            schema:
              properties:
                file:
                  description: 1MBまでのpng, jpeg, gif
                  format: binary
                  type: string
      responses:
        200:
          description: 正常に更新できました。
        400:
          description: 正常に更新できませんでした。不正なファイルです。
      security:
      - traqOAuth2:
        - write
      tags:
      - user
  /users/me/stamp-history:
    get:
      description: 自分のスタンプ履歴を最大50件取得します。結果は降順で返されます。
      responses:
        200:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/inline_response_200_1'
                type: array
          description: 正常に取得できました。
      security:
      - traqOAuth2:
        - read
      tags:
      - stamp
  /users/me/groups:
    get:
      description: 所属するユーザーグループのIDを取得します
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UUIDs'
          description: 正常に取得できました
      security:
      - traqOAuth2:
        - read
      tags:
      - user group
  /users/me/notification:
    get:
      description: 自分が通知を入れているチャンネルのリストを取得します
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UUIDs'
          description: 正常に取得できました。チャンネルIDの配列を返します。
      security:
      - traqOAuth2:
        - read
      tags:
      - notification
  /users/me/tokens:
    get:
      description: 自分が許可しているクライアントの一覧とトークン情報を取得します。
      responses:
        200:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/AllowedClientInfo'
                type: array
          description: 正常に取得できました。
        403:
          description: 取得できませんでした。権限がありません。
      tags:
      - client
  /users/me/tokens/{oauth2TokenID}:
    delete:
      description: 指定したトークンの認可を取り消します。
      parameters:
      - description: 操作の対象となるTokenのID
        explode: false
        in: path
        name: oauth2TokenID
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        204:
          description: 正常に取り消すことができました。
        403:
          description: 失敗しました。権限がありません。
        404:
          description: 失敗しました。指定したトークンは存在しません。
      tags:
      - client
  /users/me/sessions:
    delete:
      description: 自分のログインセッションを全てログアウトします。
      responses:
        204:
          description: 成功しました。
        403:
          description: 権限がありません。
      tags:
      - sessions
    get:
      description: 自分のログインセッションリストを取得します。
      responses:
        200:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/inline_response_200_2'
                type: array
          description: セッションリストを返します。
        403:
          description: 権限がありません。
      tags:
      - sessions
  /users/me/sessions/{referenceID}:
    delete:
      description: 対象のセッションをログアウトします。
      parameters:
      - description: 操作の対象となるセッションの参照ID
        explode: false
        in: path
        name: referenceID
        required: true
        schema:
          type: string
        style: simple
      responses:
        204:
          description: 成功しました。
        403:
          description: 権限がありません。
        404:
          description: 対象のセッションは存在しません。
      tags:
      - sessions
  /users/me/clips:
    get:
      description: 全てのクリップを取得します。
      responses:
        200:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/inline_response_200_3'
                type: array
          description: 正常に取得できました。
      security:
      - traqOAuth2:
        - read
      tags:
      - clip
    post:
      description: 新しくメッセージをクリップします。
      requestBody:
        $ref: '#/components/requestBodies/inline_object_7'
        content:
          application/json:
            schema:
              properties:
                messageId:
                  description: クリップするメッセージID
                  format: uuid
                  type: string
                folderId:
                  description: クリップフォルダ名
                  format: uuid
                  type: string
              required:
              - messageId
              type: object
      responses:
        201:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_201'
          description: 正常にクリップできました。クリップIDを返します。
        400:
          description: 正常にクリップできませんでした。リクエスト内容が不正です。
      security:
      - traqOAuth2:
        - write
      tags:
      - clip
  /users/me/clips/{clipID}:
    delete:
      description: 指定したクリップを削除します。
      parameters:
      - description: 捜査の対象となるクリップのID
        explode: false
        in: path
        name: clipID
        required: true
        schema:
          type: string
        style: simple
      responses:
        204:
          description: 正常に削除できました。
        404:
          description: 正常に削除できませんでした。指定したクリップは存在しません。
      security:
      - traqOAuth2:
        - write
      tags:
      - clip
    get:
      description: 指定したクリップのメッセージを取得します。
      parameters:
      - description: 捜査の対象となるクリップのID
        explode: false
        in: path
        name: clipID
        required: true
        schema:
          type: string
        style: simple
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
          description: 正常に取得できました。
        404:
          description: 正常に取得できませんでした。指定したクリップは存在しません。
      security:
      - traqOAuth2:
        - read
      tags:
      - clip
  /users/me/clips/{clipID}/folder:
    get:
      description: 指定したクリップのフォルダ情報を取得します。
      parameters:
      - description: 捜査の対象となるクリップのID
        explode: false
        in: path
        name: clipID
        required: true
        schema:
          type: string
        style: simple
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClipsFolder'
          description: 正常に取得できました。
        404:
          description: 正常に取得できませんでした。指定したクリップは存在しません。
      security:
      - traqOAuth2:
        - read
      tags:
      - clip
    put:
      description: 指定したクリップのフォルダを変更します。
      parameters:
      - description: 捜査の対象となるクリップのID
        explode: false
        in: path
        name: clipID
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/inline_object_8'
        content:
          application/json:
            schema:
              properties:
                folderId:
                  description: フォルダID
                  format: uuid
                  type: string
              required:
              - folderId
              type: object
      responses:
        204:
          description: 正常に変更できました。
        400:
          description: 正常に変更できませんでした。指定したフォルダは存在しません。
        404:
          description: 正常に変更できませんでした。指定したクリップは存在しません。
      security:
      - traqOAuth2:
        - write
      tags:
      - clip
  /users/me/clips/folders:
    get:
      description: クリップフォルダ一覧を取得します。
      responses:
        200:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ClipsFolder'
                type: array
          description: 正常に取得できました。
      security:
      - traqOAuth2:
        - read
      tags:
      - clip
    post:
      description: クリップフォルダを作成します。
      requestBody:
        $ref: '#/components/requestBodies/inline_object_9'
        content:
          application/json:
            schema:
              properties:
                name:
                  description: フォルダ名(30文字以内)
                  type: string
              required:
              - name
              type: object
      responses:
        201:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClipsFolder'
          description: 正常に作成できました。作成したフォルダ情報を返します。
        400:
          description: 作成できませんでした。リクエスト内容が不正です。
        409:
          description: 作成できませんでした。既に存在します。
      security:
      - traqOAuth2:
        - write
      tags:
      - clip
  /users/me/clips/folders/{folderID}:
    delete:
      description: クリップフォルダを削除します。フォルダ内のクリップは全て削除されます。
      parameters:
      - description: 操作の対象となるクリップフォルダのID
        explode: false
        in: path
        name: folderID
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        204:
          description: 正常に削除できました。
        404:
          description: 正常に削除できませんでした。存在しないフォルダです。
      security:
      - traqOAuth2:
        - write
      tags:
      - clip
    get:
      description: フォルダ内のクリップ一覧を取得します。
      parameters:
      - description: 操作の対象となるクリップフォルダのID
        explode: false
        in: path
        name: folderID
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        200:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/inline_response_200_4'
                type: array
          description: 正常に取得できました。クリップしたメッセージのリストを返します。
        404:
          description: 取得できませんでした。存在しないフォルダです。
      security:
      - traqOAuth2:
        - read
      tags:
      - clip
    patch:
      description: クリップフォルダ名を変更します。
      parameters:
      - description: 操作の対象となるクリップフォルダのID
        explode: false
        in: path
        name: folderID
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/inline_object_10'
        content:
          application/json:
            schema:
              properties:
                name:
                  description: フォルダ名(30文字以内)
                  type: string
              required:
              - name
              type: object
      responses:
        204:
          description: 正常に変更できました。
        400:
          description: 正常に変更できませんでした。リクエスト内容が不正です。
        404:
          description: 正常に変更できませんでした。存在しないフォルダです。
        409:
          description: 正常に変更できませんでした。既に存在するフォルダです。
      security:
      - traqOAuth2:
        - write
      tags:
      - clip
  /users/me/stars:
    get:
      description: お気に入りチャンネルリストを取得します。
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UUIDs'
          description: 正常に取得できました。お気に入りチャンネルのIDの配列を返します。
      security:
      - traqOAuth2:
        - read
      tags:
      - star
  /users/me/stars/{channelID}:
    delete:
      description: +| お気に入りチャンネルリストから削除します。 既にお気に入りチャンネルリストに無いチャンネルを指定した場合は無視されます(204)。
      parameters:
      - description: 操作の対象となるチャンネルのID
        explode: false
        in: path
        name: channelID
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        204:
          description: 正常に削除されました。
        404:
          description: 削除に失敗しました。指定されたチャンネルは存在しません。
      security:
      - traqOAuth2:
        - write
      tags:
      - star
    put:
      description: お気に入りチャンネルリストにチャンネルを追加します。
      parameters:
      - description: 操作の対象となるチャンネルのID
        explode: false
        in: path
        name: channelID
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        204:
          description: 正常に追加できました。
        404:
          description: 正常に追加できませんでした。対象のチャンネルが存在しません。
      security:
      - traqOAuth2:
        - write
      tags:
      - star
  /users/me/unread/channels:
    get:
      description: 未読チャンネル情報のリストを取得します。
      responses:
        200:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/inline_response_200_5'
                type: array
          description: 正常に取得できました。
      security:
      - traqOAuth2:
        - read
      tags:
      - unread
  /users/me/unread/channels/{channelID}:
    delete:
      description: 指定されたチャンネルの未読メッセージを既読にします。存在しないチャンネルIDを指定した場合は、無視されます。
      parameters:
      - description: 操作の対象となるチャンネルのID
        explode: false
        in: path
        name: channelID
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        204:
          description: 正常にメッセージを既読にできました。
      security:
      - traqOAuth2:
        - write
      tags:
      - unread
  /users/me/mute:
    get:
      description: ミュートしているチャンネルのIDの配列を返します。
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UUIDs'
          description: 正常に取得できました。
      security:
      - traqOAuth2:
        - read
      tags:
      - mute
  /users/me/mute/{channelID}:
    delete:
      description: 指定したチャンネルのミュートを解除します。既に解除されていた場合は204を返します。
      parameters:
      - description: 操作の対象となるチャンネルのID
        explode: false
        in: path
        name: channelID
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        204:
          description: 正常にミュートを解除できました。
        404:
          description: ミュートを解除できませんでした。指定したチャンネルは存在しません。
      security:
      - traqOAuth2:
        - write
      tags:
      - mute
    post:
      description: 指定したチャンネルをミュートします。ただし、強制通知チャンネルはミュートできません。既にミュートしていた場合は204を返します。
      parameters:
      - description: 操作の対象となるチャンネルのID
        explode: false
        in: path
        name: channelID
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        204:
          description: 正常にミュートできました。
        403:
          description: ミュートできませんでした。許可されていません。
        404:
          description: ミュートできませんでした。指定したチャンネルは存在しません。
      security:
      - traqOAuth2:
        - write
      tags:
      - mute
  /users/{userID}:
    get:
      description: ユーザーの詳細を取得します。
      parameters:
      - description: 操作の対象となるユーザーID
        explode: false
        in: path
        name: userID
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetail'
          description: |
            正常に取得できました。
            ユーザー情報を返します。
        404:
          description: +| 正常に取得できませんでした。 指定したユーザーは存在しません。
      security:
      - traqOAuth2:
        - read
        - manage_bot
      tags:
      - user
  /users/{userID}/messages:
    get:
      description: DMチャンネルに存在するメッセージを取得します。
      parameters:
      - description: 操作の対象となるユーザーID
        explode: false
        in: path
        name: userID
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: 取得する件数 1-200
        example: 50
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 0
          type: integer
        style: form
      - description: 取得するオフセット
        example: 150
        explode: true
        in: query
        name: offset
        required: false
        schema:
          default: 0
          type: integer
        style: form
      - description: 取得する時間範囲の開始日時
        example: 2016-10-12T11:00:00.000000Z
        explode: true
        in: query
        name: since
        required: false
        schema:
          default: +0000-01-01T00:00:00.000+0000
          format: date-time
          type: string
        style: form
      - description: 取得する時間範囲の終了日時
        example: 2016-10-12T11:00:00.0000000Z
        explode: true
        in: query
        name: until
        required: false
        schema:
          default: +10000-01-01T00:00:39.999+0000
          format: date-time
          type: string
        style: form
      - description: 範囲の端を含めるかどうか
        explode: true
        in: query
        name: inclusive
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: 昇順か降順か
        explode: true
        in: query
        name: order
        required: false
        schema:
          default: desc
          enum:
          - asc
          - desc
          type: string
        style: form
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageList'
          description: |
            正常に取得ができました。
            メッセージの配列を返します。
          headers:
            X-TRAQ-MORE:
              $ref: '#/components/headers/X-TRAQ-MORE'
        400:
          description: |
            変更に失敗しました
            不正なリクエストです
        404:
          description: |
            取得に失敗しました。
            指定したユーザーは存在しません。
      security:
      - traqOAuth2:
        - read
      tags:
      - message
    post:
      description: DMチャンネルにメッセージを投稿します。
      parameters:
      - description: 操作の対象となるユーザーID
        explode: false
        in: path
        name: userID
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/inline_object_11'
        content:
          application/json:
            schema:
              properties:
                text:
                  description: Markdown形式のメッセージ本文
                  example: Raskって誰？
                  type: string
              required:
              - text
              type: object
      responses:
        201:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
          description: |
            投稿に成功しました。
            投稿されたメッセージが返されます。
        404:
          description: +| 投稿に失敗しました。 指定したユーザーは存在しません。
      security:
      - traqOAuth2:
        - write
      tags:
      - message
  /users/{userID}/icon:
    get:
      description: ユーザーのアイコン画像を取得します。
      parameters:
      - description: 操作の対象となるユーザーID
        explode: false
        in: path
        name: userID
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        200:
          content:
            image/jpeg:
              schema:
                format: binary
                type: string
            image/png:
              schema:
                format: binary
                type: string
            image/gif:
              schema:
                format: binary
                type: string
          description: 正常に取得できました。
        404:
          description: 正常に取得できませんでした。指定したユーザーは存在しません。
      security:
      - traqOAuth2:
        - read
      tags:
      - user
  /users/{userID}/notification:
    get:
      description: ユーザーが通知を入れているチャンネルのリストを取得します
      parameters:
      - description: 操作の対象となるユーザーID
        explode: false
        in: path
        name: userID
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UUIDs'
          description: 正常に取得できました。チャンネルIDの配列を返します。
        404:
          description: 取得に失敗しました。指定したユーザーは存在しません。
      security:
      - traqOAuth2:
        - read
      tags:
      - notification
  /users/{userID}/groups:
    get:
      description: 所属するユーザーグループのIDを取得します
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UUIDs'
          description: 正常に取得できました
        404:
          description: 正常に取得できませんでした。指定したユーザーは存在しません。
      security:
      - traqOAuth2:
        - read
      tags:
      - user group
  /users/{userID}/tags:
    get:
      description: ユーザーのタグのリストを取得します。
      parameters:
      - description: 操作の対象となるユーザーID
        explode: false
        in: path
        name: userID
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagList'
          description: |
            正常に取得できました。
            タグのリストを返します。
        404:
          description: |
            正常に取得できませんでした。
            指定したユーザーは存在しません。
      security:
      - traqOAuth2:
        - read
      tags:
      - userTag
    post:
      description: ユーザーにタグを追加します。
      parameters:
      - description: 操作の対象となるユーザーID
        explode: false
        in: path
        name: userID
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/inline_object_12'
        content:
          application/json:
            schema:
              properties:
                tag:
                  description: 追加するタグ(30文字まで)
                  example: 山田太郎
                  type: string
              required:
              - tag
              type: object
      responses:
        201:
          description: |
            正常に追加できました。
        400:
          description: |
            正常に追加できませんでした。
            パラメータの形式が不正です。
        403:
          description: |
            正常に追加できませんでした。
            権限がありません。
        404:
          description: +| 正常に追加できませんでした。 指定したユーザーは存在しません。
      security:
      - traqOAuth2:
        - write
      tags:
      - userTag
  /users/{userID}/tags/{tagID}:
    delete:
      description: ユーザーから指定したタグを削除します。既に存在しないタグを削除しようとした場合は無視されます(204)。
      parameters:
      - description: 操作の対象となるユーザーID
        explode: false
        in: path
        name: userID
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: 操作の対象となるタグID
        explode: false
        in: path
        name: tagID
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        204:
          description: |
            正常に削除できました。
        403:
          description: |
            正常に削除できませんでした。
            権限がありません。
        404:
          description: +| 正常に削除できませんでした。 指定したユーザーは存在しません。
      security:
      - traqOAuth2:
        - write
      tags:
      - userTag
    patch:
      description: タグのロック、アンロックを変更します。
      parameters:
      - description: 操作の対象となるユーザーID
        explode: false
        in: path
        name: userID
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: 操作の対象となるタグID
        explode: false
        in: path
        name: tagID
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/inline_object_13'
        content:
          application/json:
            schema:
              properties:
                isLocked:
                  description: lockするときはtrue,解除するときはfalse
                  example: true
                  type: boolean
              required:
              - isLocked
              type: object
      responses:
        204:
          description: |
            正常に変更できました。
        400:
          description: |
            正常に変更できませんでした。
            パラメータの形式が不正です。
        403:
          description: |
            正常に変更できませんでした。
            権限がありません。
        404:
          description: |
            正常に変更できませんでした。
            指定したユーザー、もしくはタグは存在しません。
      security:
      - traqOAuth2:
        - write
      tags:
      - userTag
  /heartbeat:
    get:
      description: チャンネルを現在見ている人・編集している人を取得します。
      parameters:
      - description: 現在いるチャンネルId
        explode: true
        in: query
        name: channelId
        required: true
        schema:
          format: uuid
          type: string
        style: form
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HeartbeatRes'
          description: |
            正常に取得できました。
      security:
      - traqOAuth2:
        - read
      tags:
      - heartbeat
    post:
      description: どのチャンネルを見ているか・編集しているかを送信します。
      parameters:
      - description: editing,monitoring,noneでユーザーの状態を指定する
        explode: true
        in: query
        name: status
        required: true
        schema:
          enum:
          - none
          - monitoring
          - editing
          type: string
        style: form
      - description: 現在いるチャンネルId
        explode: true
        in: query
        name: channelId
        required: true
        schema:
          format: uuid
          type: string
        style: form
      responses:
        204:
          description: 正常に送信できました。
      security:
      - traqOAuth2:
        - write
      tags:
      - heartbeat
  /channels:
    get:
      description: |
        (すべての)チャンネルのリストを取得します。
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChannelList'
          description: |
            正常に取得できました。
            チャンネルの配列を返します。
      security:
      - traqOAuth2:
        - read
        - manage_bot
      tags:
      - channel
    post:
      description: チャンネルを作成します。
      requestBody:
        $ref: '#/components/requestBodies/inline_object_14'
        content:
          application/json:
            schema:
              properties:
                private:
                  description: プライベートチャンネルかどうか
                  type: boolean
                member:
                  items:
                    description: チャンネルに参加させるuserのuserId
                    format: uuid
                    type: string
                  type: array
                name:
                  description: チャンネル名
                  example: random
                  type: string
                parent:
                  description: 親のチャンネルID
                  format: uuid
                  type: string
              required:
              - type
              type: object
      responses:
        201:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Channel'
          description: |
            正常にチャンネルが作成できました。
            作成されたチャンネルを返します。
        400:
          description: +| 正常にチャンネルが作成できませんでした。 親チャンネルが存在しない又は指定されたタイプに対して適切なプロパティが存在しません。
      security:
      - traqOAuth2:
        - write
      tags:
      - channel
  /channels/{channelID}:
    delete:
      description: チャンネルを削除します。
      parameters:
      - description: 操作の対象となるチャンネルのID
        explode: false
        in: path
        name: channelID
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        204:
          description: 削除に成功しました。
        404:
          description: +| 削除に失敗しました。 指定したチャンネルは既に存在しません。
      tags:
      - channel
    get:
      description: チャンネルの情報を返します。
      parameters:
      - description: 操作の対象となるチャンネルのID
        explode: false
        in: path
        name: channelID
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Channel'
          description: |
            正常に取得ができました。
            チャンネルを返します。
        404:
          description: |
            取得に失敗しました。
            指定したチャンネルは存在しません。
      security:
      - traqOAuth2:
        - read
      tags:
      - channel
    patch:
      description: チャンネルの情報を変更します。
      parameters:
      - description: 操作の対象となるチャンネルのID
        explode: false
        in: path
        name: channelID
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/inline_object_15'
        content:
          application/json:
            schema:
              properties:
                name:
                  description: チャンネル名
                  example: gps
                  type: string
                visibility:
                  description: 変更後のvisibility
                  example: true
                  type: boolean
                force:
                  description: 強制通知かどうか
                  type: boolean
              type: object
      responses:
        204:
          description: 正常に変更ができました。
        400:
          description: 失敗しました。リクエスト内容が不正です。
        403:
          description: 失敗しました。権限がありません。
        404:
          description: |
            変更に失敗しました。
            指定したチャンネルは存在しません。
      tags:
      - channel
  /channels/{channelID}/parent:
    put:
      description: チャンネルの親チャンネルを変更します。
      parameters:
      - description: 操作の対象となるチャンネルのID
        explode: false
        in: path
        name: channelID
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/inline_object_16'
        content:
          application/json:
            schema:
              properties:
                parent:
                  description: 変更後の親チャンネルID
                  format: uuid
                  type: string
              required:
              - parent
              type: object
      responses:
        204:
          description: 変更に成功しました。
        400:
          description: 変更に失敗しました。リクエスト内容が不正です。
        403:
          description: 変更に失敗しました。権限がありません。
        404:
          description: 変更に失敗しました。指定されたチャンネルは存在しません。
        409:
          description: 変更に失敗しました。チャンネル名が競合しています。
      tags:
      - channel
  /channels/{channelID}/children:
    post:
      description: 子チャンネルを作成します。
      parameters:
      - description: 操作の対象となるチャンネルのID
        explode: false
        in: path
        name: channelID
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/inline_object_17'
        content:
          application/json:
            schema:
              properties:
                name:
                  description: チャンネル名
                  example: random
                  type: string
              required:
              - name
              type: object
      responses:
        201:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Channel'
          description: 正常にチャンネルが作成できました。作成されたチャンネルを返します。
        400:
          description: チャンネルが作成できませんでした。リクエスト内容が不正です。
        403:
          description: チャンネルが作成できませんでした。権限がありません。
        404:
          description: チャンネルが作成できませんでした。指定したチャンネルは存在しません。
        409:
          description: チャンネルが作成できませんでした。指定したチャンネル名のチャンネルは既に存在します。
      security:
      - traqOAuth2:
        - write
      tags:
      - channel
  /channels/{channelID}/pins:
    get:
      description: チャンネルのピン留め一覧を取得します。
      parameters:
      - description: 操作の対象となるチャンネルのID
        explode: false
        in: path
        name: channelID
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PinList'
          description: |
            正常に取得できました。
      security:
      - traqOAuth2:
        - read
      tags:
      - pin
  /channels/{channelID}/topic:
    get:
      description: チャンネルの説明を取得します。
      parameters:
      - description: 操作の対象となるチャンネルのID
        explode: false
        in: path
        name: channelID
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_6'
          description: +| 正常に取得ができました。 チャンネルトピックを返します。
        404:
          description: +| 取得に失敗しました。 指定したチャンネルは存在しません。
      security:
      - traqOAuth2:
        - read
      tags:
      - channel
    put:
      description: チャンネルの説明を変更します。
      parameters:
      - description: 操作の対象となるチャンネルのID
        explode: false
        in: path
        name: channelID
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/inline_object_18'
        content:
          application/json:
            schema:
              properties:
                text:
                  description: チャンネルの説明
                  example: なんでも良いチャンネルです!!
                  type: string
              required:
              - text
              type: object
      responses:
        204:
          description: 正常に更新できました。
        404:
          description: +| 更新に失敗しました。 指定したチャンネルは存在しません。
      security:
      - traqOAuth2:
        - write
      tags:
      - channel
  /channels/{channelID}/messages:
    get:
      description: チャンネルに存在するメッセージを取得します。
      parameters:
      - description: 操作の対象となるチャンネルのID
        explode: false
        in: path
        name: channelID
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: 取得する件数 1-200
        example: 50
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 0
          type: integer
        style: form
      - description: 取得するオフセット
        example: 150
        explode: true
        in: query
        name: offset
        required: false
        schema:
          default: 0
          type: integer
        style: form
      - description: 取得する時間範囲の開始日時
        example: 2016-10-12T11:00:00.000000Z
        explode: true
        in: query
        name: since
        required: false
        schema:
          default: +0000-01-01T00:00:00.000+0000
          format: date-time
          type: string
        style: form
      - description: 取得する時間範囲の終了日時
        example: 2016-10-12T11:00:00.0000000Z
        explode: true
        in: query
        name: until
        required: false
        schema:
          default: +10000-01-01T00:00:39.999+0000
          format: date-time
          type: string
        style: form
      - description: 範囲の端を含めるかどうか
        explode: true
        in: query
        name: inclusive
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: 昇順か降順か
        explode: true
        in: query
        name: order
        required: false
        schema:
          default: desc
          enum:
          - asc
          - desc
          type: string
        style: form
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageList'
          description: |
            正常に取得ができました。
            メッセージの配列を返します。
          headers:
            X-TRAQ-MORE:
              $ref: '#/components/headers/X-TRAQ-MORE'
        400:
          description: |
            変更に失敗しました
            不正なリクエストです
        404:
          description: |
            取得に失敗しました。
            指定したチャンネルは存在しません。
      security:
      - traqOAuth2:
        - read
      tags:
      - message
    post:
      description: チャンネルにメッセージを投稿します。
      parameters:
      - description: 操作の対象となるチャンネルのID
        explode: false
        in: path
        name: channelID
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/inline_object_19'
        content:
          application/json:
            schema:
              properties:
                text:
                  description: Markdown形式のメッセージ本文
                  example: Raskって誰？
                  type: string
              required:
              - text
              type: object
      responses:
        201:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
          description: |
            投稿に成功しました。
            投稿されたメッセージが返されます。
        404:
          description: +| 投稿に失敗しました。 指定したチャンネルは存在しません。
      security:
      - traqOAuth2:
        - write
      tags:
      - message
  /channels/{channelID}/notification:
    get:
      description: 通知を点けているユーザーのIDの配列を取得します。
      parameters:
      - description: 操作の対象となるチャンネルのID
        explode: false
        in: path
        name: channelID
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UUIDs'
          description: 正常に取得できました
        404:
          description: 取得に失敗しました。指定したチャンネルは存在しません。
      security:
      - traqOAuth2:
        - read
      tags:
      - notification
    put:
      description: |
        チャンネルの通知状況を変更します。
        リクエストに含めなかったユーザーIDのユーザーの通知状況は変更しません。
        また、存在しないユーザーのIDを指定した場合は無視されます。
      parameters:
      - description: 操作の対象となるチャンネルのID
        explode: false
        in: path
        name: channelID
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/inline_object_20'
        content:
          application/json:
            schema:
              properties:
                on:
                  description: 通知をつける人のユーザーIDの配列
                  items:
                    format: uuid
                    type: string
                  type: array
                off:
                  description: 通知をつけない人のユーザーIDの配列
                  items:
                    format: uuid
                    type: string
                  type: array
              type: object
      responses:
        204:
          description: 正常に更新できました。
        404:
          description: +| 変更に失敗しました。 指定したチャンネルは存在しません。
      security:
      - traqOAuth2:
        - write
      tags:
      - notification
  /channels/{channelID}/bots:
    get:
      description: チャンネルに参加しているBot一覧を取得します。
      parameters:
      - description: 操作の対象となるチャンネルのID
        explode: false
        in: path
        name: channelID
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        200:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/inline_response_200_7'
                type: array
          description: 正常に取得できました。
        404:
          description: 取得できませんでした。指定したチャンネルは存在しません。
      security:
      - traqOAuth2:
        - read
        - manage_bot
      tags:
      - bot
    post:
      description: チャンネルにBotを参加させます。
      parameters:
      - description: 操作の対象となるチャンネルのID
        explode: false
        in: path
        name: channelID
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/inline_object_21'
        content:
          application/json:
            schema:
              properties:
                code:
                  description: ボットコード
                  type: string
              required:
              - code
              type: object
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_8'
          description: 正常にBotが参加しました。
        400:
          description: 参加させることができませんでした。リクエスト内容が不正です。
        404:
          description: 参加させることができませんでした。指定したチャンネルは存在しません。
      security:
      - traqOAuth2:
        - write
        - manage_bot
      tags:
      - bot
  /channels/{channelID}/bots/{botID}:
    delete:
      description: Botをチャンネルから退出させます。
      parameters:
      - description: 操作の対象となるチャンネルのID
        explode: false
        in: path
        name: channelID
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: 操作の対象となるBotのID
        explode: false
        in: path
        name: botID
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        204:
          description: 正常に退出させることができました。
        404:
          description: 退出させることができませんでした。指定したチャンネル、またはBotは存在しません。
      security:
      - traqOAuth2:
        - write
        - manage_bot
      tags:
      - bot
  /notification:
    get:
      description: 通知ストリーム(Server Sent Events)に接続します。
      responses:
        200:
          description: 接続が完了しました。
      security:
      - traqOAuth2:
        - read
      tags:
      - notification
  /notification/device:
    post:
      description: FCMデバイスを登録します。
      requestBody:
        $ref: '#/components/requestBodies/inline_object_22'
        content:
          application/json:
            schema:
              properties:
                token:
                  description: FCMのデバイストークン
                  example: bk3RNwTe3H0:CI2k_HHwgIpoDKCIZvvDMExUdFQ3P1
                  type: string
              required:
              - token
              type: object
      responses:
        201:
          description: 正常に登録できました。
      security:
      - traqOAuth2:
        - write
      tags:
      - notification
  /messages/reports:
    get:
      description: メッセージ通報を最大50件取得します。
      parameters:
      - description: ページ番号(ゼロオリジン)
        explode: true
        in: query
        name: p
        required: false
        schema:
          type: integer
        style: form
      responses:
        200:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/inline_response_200_9'
                type: array
          description: 正常に取得できました。
        403:
          description: 取得できませんでした。権限がありません。
      tags:
      - message
  /messages/{messageID}:
    delete:
      description: 指定したメッセージを削除します。
      parameters:
      - description: 操作の対象となるメッセージID
        explode: false
        in: path
        name: messageID
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        204:
          description: 正常に削除できました。
        403:
          description: 削除できませんでした。指定されたメッセージを削除する権限がありません。
        404:
          description: 削除できませんでした。指定されたメッセージは存在しません。
      security:
      - traqOAuth2:
        - write
      tags:
      - message
    get:
      description: 指定したメッセージを取得します。
      parameters:
      - description: 操作の対象となるメッセージID
        explode: false
        in: path
        name: messageID
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
          description: 正常に取得できました。
        404:
          description: 取得できませんでした。指定されたメッセージは存在しません。
      security:
      - traqOAuth2:
        - read
      tags:
      - message
    put:
      description: 指定したメッセージを編集します。
      parameters:
      - description: 操作の対象となるメッセージID
        explode: false
        in: path
        name: messageID
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/inline_object_23'
        content:
          application/json:
            schema:
              properties:
                text:
                  description: Markdown形式のメッセージ本文
                  example: Raskって誰？
                  type: string
              required:
              - text
              type: object
      responses:
        204:
          description: 正常に編集できました。
        403:
          description: 編集できませんでした。指定されたメッセージを編集する権限がありません。
        404:
          description: 編集できませんでした。指定されたメッセージは存在しません。
      security:
      - traqOAuth2:
        - write
      tags:
      - message
  /messages/{messageID}/report:
    post:
      description: 指定したメッセージを通報します。
      parameters:
      - description: 操作の対象となるメッセージID
        explode: false
        in: path
        name: messageID
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/inline_object_24'
        content:
          application/json:
            schema:
              properties:
                reason:
                  description: 通報理由(100文字以内)
                  type: string
              required:
              - reason
              type: object
      responses:
        204:
          description: 通報を受理しました。
        400:
          description: 通報を受理できませんでした。リクエスト内容が不正です。
        404:
          description: 通報を受理できませんでした。指定されたメッセージは存在しません。
      security:
      - traqOAuth2:
        - write
      tags:
      - message
  /messages/{messageID}/stamps:
    get:
      description: 指定したメッセージに押されているスタンプを全て取得します。
      parameters:
      - description: 操作の対象となるメッセージID
        explode: false
        in: path
        name: messageID
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        200:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/MessageStamp'
                type: array
          description: 正常に取得できました。
        404:
          description: 取得できませんでした。指定したメッセージは存在しません。
      security:
      - traqOAuth2:
        - read
      tags:
      - stamp
  /messages/{messageID}/stamps/{stampID}:
    delete:
      description: 指定したメッセージから指定したスタンプを外します。
      parameters:
      - description: 操作の対象となるメッセージID
        explode: false
        in: path
        name: messageID
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: 操作の対象となるスタンプID
        explode: false
        in: path
        name: stampID
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        204:
          description: 正常にスタンプを外すことができました。
        404:
          description: スタンプを外すことができませんでした。指定されたスタンプまたはメッセージは存在しません。
      security:
      - traqOAuth2:
        - write
      tags:
      - stamp
    post:
      description: 指定したメッセージに指定したスタンプを押します。
      parameters:
      - description: 操作の対象となるメッセージID
        explode: false
        in: path
        name: messageID
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: 操作の対象となるスタンプID
        explode: false
        in: path
        name: stampID
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        204:
          description: 正常にスタンプを押すことができました。
        404:
          description: スタンプを押すことができませんでした。指定されたスタンプまたはメッセージは存在しません。
      security:
      - traqOAuth2:
        - write
      tags:
      - stamp
  /tags/{tagID}:
    get:
      description: 指定されたタグの情報を取得します。
      parameters:
      - description: 操作の対象となるタグID
        explode: false
        in: path
        name: tagID
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_10'
          description: 正常に取得できました。
        404:
          description: 正常に取得できませんでした。指定されたタグIDは存在しません
      security:
      - traqOAuth2:
        - read
      tags:
      - userTag
  /files:
    post:
      description: ファイルをアップロードします
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                file:
                  description: ファイル本体
                  format: binary
                  type: string
                acl_readable:
                  default: all
                  description: ファイルにアクセスすることが可能なユーザーのUUIDの文字列表現をカンマ区切りで連結した文字列、または'all'(デフォルト)
                  type: string
              required:
              - file
      responses:
        201:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileInfo'
          description: 正常にファイルがアップロードされました。
        403:
          description: ファイルがアップロード出来ませんでした。リクエスト内容が不正です。
        411:
          description: ファイルがアップロード出来ませんでした。Content-Lengthヘッダーを送信してください。
        413:
          description: ファイルがアップロード出来ませんでした。ファイルサイズが大きすぎます。
      security:
      - traqOAuth2:
        - write
      tags:
      - file
  /files/{fileID}:
    delete:
      description: 指定したファイルを削除します。
      parameters:
      - description: 操作の対象となるファイルID
        explode: false
        in: path
        name: fileID
        required: true
        schema:
          type: string
        style: simple
      responses:
        204:
          description: 正常に削除できました。
        403:
          description: 削除できませんでした。指定されたファイルを削除する権限がありません。
        404:
          description: 削除できませんでした。指定されたファイルは存在しません。
      tags:
      - file
    get:
      description: 指定したファイルの中身を取得します。
      parameters:
      - description: 操作の対象となるファイルID
        explode: false
        in: path
        name: fileID
        required: true
        schema:
          type: string
        style: simple
      - description: ファイルをダウンロードする場合に1を指定する
        explode: true
        in: query
        name: dl
        required: false
        schema:
          type: integer
        style: form
      responses:
        200:
          content:
            application/octet-stream:
              schema:
                format: binary
                type: string
          description: |
            正常に取得できました。
            fileのbinaryを返します。
            application/octet-streamで返すことになっていますが、ファイルの形式によっては変わります。
        403:
          description: 取得できませんでした。指定されたファイルにアクセスする権限がありません。
        404:
          description: 取得できませんでした。指定されたファイルは存在しません。
      security:
      - traqOAuth2:
        - read
      tags:
      - file
  /files/{fileID}/meta:
    get:
      description: 指定したファイルのメタデータを取得します
      parameters:
      - description: 操作の対象となるファイルID
        explode: false
        in: path
        name: fileID
        required: true
        schema:
          type: string
        style: simple
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileInfo'
          description: 正常に取得できました。
        403:
          description: 取得できませんでした。指定されたファイルにアクセスする権限がありません。
        404:
          description: 取得できませんでした。指定されたファイルは存在しません。
      security:
      - traqOAuth2:
        - read
      tags:
      - file
  /files/{fileID}/thumbnail:
    get:
      description: 指定したファイルのサムネイルを取得します
      parameters:
      - description: 操作の対象となるファイルID
        explode: false
        in: path
        name: fileID
        required: true
        schema:
          type: string
        style: simple
      responses:
        200:
          content:
            image/png:
              schema:
                format: binary
                type: string
          description: 正常に取得できました。
        403:
          description: 取得できませんでした。指定されたファイルのサムネイルにアクセスする権限がありません。
        404:
          description: 取得できませんでした。指定されたファイルのサムネイルは存在しません。
      security:
      - traqOAuth2:
        - read
      tags:
      - file
  /pins:
    post:
      description: チャンネルにメッセージをピン留めします。
      requestBody:
        $ref: '#/components/requestBodies/inline_object_25'
        content:
          application/json:
            schema:
              properties:
                messageId:
                  description: ピン留めするメッセージID
                  format: uuid
                  type: string
              required:
              - messageId
              type: object
      responses:
        201:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_201_1'
          description: 正常にピン留めできました。
      security:
      - traqOAuth2:
        - write
      tags:
      - pin
  /pins/{pinID}:
    delete:
      description: ピン留めを外します。
      parameters:
      - description: 操作の対象となるピン留めID
        explode: false
        in: path
        name: pinID
        required: true
        schema:
          type: string
        style: simple
      responses:
        204:
          description: |
            正常に外せました。
        404:
          description: +| 指定したIDのピンは存在しません。
      security:
      - traqOAuth2:
        - write
      tags:
      - pin
    get:
      description: ピン留めを取得します。
      parameters:
      - description: 操作の対象となるピン留めID
        explode: false
        in: path
        name: pinID
        required: true
        schema:
          type: string
        style: simple
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pin'
          description: |
            正常に取得できました。
      security:
      - traqOAuth2:
        - read
      tags:
      - pin
  /stamps:
    get:
      description: 全スタンプのリストを取得します。
      responses:
        200:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Stamp'
                type: array
          description: 正常に取得できました。
      security:
      - traqOAuth2:
        - read
      tags:
      - stamp
    post:
      description: スタンプを新規作成します。
      requestBody:
        content:
          multipart/form-data:
            encoding:
              file:
                contentType: image/png, image/jpeg, image/gif, image/svg+xml
                style: form
            schema:
              properties:
                name:
                  description: スタンプ名(半角英数字と-+_のみを含む32文字以内の文字列)
                  type: string
                file:
                  description: 1MBまでのpng, jpeg, gif, svg
                  format: binary
                  type: string
              required:
              - file
              - name
      responses:
        201:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Stamp'
          description: 正常にスタンプが作成されました。
        400:
          description: 正常にスタンプが作成できませんでした。
      security:
      - traqOAuth2:
        - write
      tags:
      - stamp
  /stamps/{stampID}:
    delete:
      description: スタンプを削除します。
      parameters:
      - description: 操作の対象となるスタンプID
        explode: false
        in: path
        name: stampID
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        204:
          description: 正常に削除できました。
        403:
          description: 削除できませんでした。指定されたスタンプを削除する権限がありません。
        404:
          description: 削除できませんでした。指定されたスタンプは存在しません。
      tags:
      - stamp
    get:
      description: スタンプの情報を取得します。
      parameters:
      - description: 操作の対象となるスタンプID
        explode: false
        in: path
        name: stampID
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Stamp'
          description: 正常に取得できました。
        404:
          description: 取得できませんでした。指定されたスタンプは存在しません。
      security:
      - traqOAuth2:
        - read
      tags:
      - stamp
    patch:
      description: スタンプを修正します。
      parameters:
      - description: 操作の対象となるスタンプID
        explode: false
        in: path
        name: stampID
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          multipart/form-data:
            encoding:
              file:
                contentType: image/png, image/jpeg, image/gif, image/svg+xml
                style: form
            schema:
              properties:
                name:
                  description: スタンプ名(半角英数字と-+_のみを含む32文字以内の文字列)
                  type: string
                file:
                  description: 1MBまでのpng, jpeg, gif, svg
                  format: binary
                  type: string
      responses:
        204:
          description: 正常に修正できました。
        403:
          description: 修正できませんでした。指定されたスタンプを修正する権限がありません。
        404:
          description: 修正できませんでした。指定されたスタンプは存在しません。
      security:
      - traqOAuth2:
        - write
      tags:
      - stamp
  /webhooks:
    get:
      description: 自分が作成したwebhookの一覧を取得します。
      responses:
        200:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Webhook'
                type: array
          description: 正常に取得できました。
      security:
      - traqOAuth2:
        - read
        - manage_bot
      tags:
      - webhook
    post:
      description: webhookを作成します。
      requestBody:
        $ref: '#/components/requestBodies/inline_object_26'
        content:
          application/json:
            schema:
              properties:
                name:
                  description: webhookユーザーの表示名(32文字まで)
                  type: string
                description:
                  description: webhookの説明
                  type: string
                channelId:
                  description: デフォルトの投稿先チャンネル(パブリックチャンネルのみ)
                  format: uuid
                  type: string
                secret:
                  description: webhookシークレット
                  type: string
              required:
              - channelId
              - description
              - name
              type: object
      responses:
        201:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Webhook'
          description: 正常に作成できました。
        400:
          description: 作成できませんでした。リクエスト内容が不正です。
        403:
          description: 作成できませんでした。権限がありません。
      security:
      - traqOAuth2:
        - manage_bot
      tags:
      - webhook
  /webhooks/{webhookID}:
    delete:
      description: webhookを削除します。
      parameters:
      - description: 操作の対象となるWebhookのID
        explode: false
        in: path
        name: webhookID
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        204:
          description: 正常に削除できました。
        403:
          description: 削除できませんでした。権限がありません。
        404:
          description: 削除できませんでした。指定したwebhookは存在しません。
      security:
      - traqOAuth2:
        - manage_bot
      tags:
      - webhook
    get:
      description: webhookの詳細を取得します。
      parameters:
      - description: 操作の対象となるWebhookのID
        explode: false
        in: path
        name: webhookID
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Webhook'
          description: 正常に取得できました。
        403:
          description: 取得できませんでした。権限がありません。
        404:
          description: 取得できませんでした。指定したwebhookは存在しません。
      security:
      - traqOAuth2:
        - read
        - manage_bot
      tags:
      - webhook
    patch:
      description: webhookを修正します。
      parameters:
      - description: 操作の対象となるWebhookのID
        explode: false
        in: path
        name: webhookID
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/inline_object_27'
        content:
          application/json:
            schema:
              properties:
                name:
                  description: webhookユーザーの表示名(32文字まで)
                  type: string
                description:
                  description: webhookの説明
                  type: string
                channelId:
                  description: デフォルトの投稿先チャンネル(パブリックチャンネルのみ)
                  format: uuid
                  type: string
                secret:
                  description: webhookシークレット
                  type: string
              type: object
      responses:
        204:
          description: 正常に修正できました。
        400:
          description: 修正できませんでした。リクエスト内容が不正です。
        403:
          description: 削除できませんでした。権限がありません。
        404:
          description: 修正できませんでした。指定したwebhookは存在しません。
      security:
      - traqOAuth2:
        - manage_bot
      tags:
      - webhook
    post:
      description: webhookを送信します。
      parameters:
      - description: 操作の対象となるWebhookのID
        explode: false
        in: path
        name: webhookID
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: 投稿先のチャンネルID(変更する場合)
        explode: false
        in: header
        name: X-TRAQ-Channel-Id
        required: false
        schema:
          format: uuid
          type: string
        style: simple
      - description: リクエストボディシグネチャ。Secretが設定されている場合は必須
        explode: false
        in: header
        name: X-TRAQ-Signature
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          text/plain:
            schema:
              description: メッセージ文字列
              type: string
      responses:
        204:
          description: 正常に送信できました。
        400:
          description: 正常に送信できませんでした。リクエスト内容が不正です。
        404:
          description: 正常に送信できませんでした。指定されたwebhookは存在しません。
      security: []
      tags:
      - webhook
  /webhooks/{webhookID}/icon:
    get:
      description: 指定したWebhookのアイコンを取得します。
      parameters:
      - description: 操作の対象となるWebhookのID
        explode: false
        in: path
        name: webhookID
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        200:
          content:
            image/jpeg:
              schema:
                format: binary
                type: string
            image/png:
              schema:
                format: binary
                type: string
            image/gif:
              schema:
                format: binary
                type: string
          description: 正常に取得できました。
        404:
          description: 取得できませんでした。指定したWebhookは存在しません。
      security:
      - traqOAuth2:
        - read
        - manage_bot
      tags:
      - webhook
    put:
      description: 指定したwebhookのアイコンを変更します。
      parameters:
      - description: 操作の対象となるWebhookのID
        explode: false
        in: path
        name: webhookID
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          multipart/form-data:
            encoding:
              file:
                contentType: image/png, image/jpeg, image/gif
                style: form
            schema:
              properties:
                file:
                  description: webhookユーザーのアイコン(1MBまでのpng, jpeg, gif)
                  format: binary
                  type: string
      responses:
        204:
          description: 正常に変更できました。
        400:
          description: 変更できませんでした。リクエスト内容が不正です。
        403:
          description: 変更できませんでした。権限がありません。
        404:
          description: 修正できませんでした。指定したwebhookは存在しません。
      security:
      - traqOAuth2:
        - manage_bot
      tags:
      - webhook
  /webhooks/{webhookID}/github:
    post:
      description: Github-Compatibleなwebhookを送信します。
      parameters:
      - description: 操作の対象となるWebhookのID
        explode: false
        in: path
        name: webhookID
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              type: object
      responses:
        204:
          description: 正常に送信できました。
        400:
          description: 正常に送信できませんでした。リクエスト内容が不正です。
        404:
          description: 正常に送信できませんでした。指定されたwebhookは存在しません。
      security: []
      tags:
      - webhook
  /groups:
    get:
      description: 全てのユーザーグループを取得します
      responses:
        200:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/UserGroup'
                type: array
          description: 正常に取得できました
      security:
      - traqOAuth2:
        - read
      tags:
      - user group
    post:
      description: ユーザーグループを作成します
      requestBody:
        $ref: '#/components/requestBodies/inline_object_28'
        content:
          application/json:
            schema:
              properties:
                name:
                  description: グループ名(30文字以内)
                  type: string
                description:
                  description: 説明
                  type: string
              required:
              - name
              type: object
      responses:
        201:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserGroup'
          description: 正常に作成できました
        400:
          description: 正常に作成できませんでした。リクエスト内容が不正です
        409:
          description: 正常に作成できませんでした。既に存在するグループ名です
      security:
      - traqOAuth2:
        - write
      tags:
      - user group
  /groups/{groupID}:
    delete:
      description: ユーザーグループを削除します
      parameters:
      - description: 操作の対象となるユーザーグループID
        explode: false
        in: path
        name: groupID
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        204:
          description: 正常に削除できました
        403:
          description: 正常に削除できませんでした。権限がありません。
        404:
          description: 正常に削除できませんでした。指定したグループは存在しません。
      security:
      - traqOAuth2:
        - write
      tags:
      - user group
    get:
      description: ユーザーグループを取得します
      parameters:
      - description: 操作の対象となるユーザーグループID
        explode: false
        in: path
        name: groupID
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserGroup'
          description: 正常に取得できました
        404:
          description: 正常に取得できませんでした。指定したグループは存在しません。
      security:
      - traqOAuth2:
        - read
      tags:
      - user group
    patch:
      description: ユーザーグループの情報を変更します
      parameters:
      - description: 操作の対象となるユーザーグループID
        explode: false
        in: path
        name: groupID
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/inline_object_29'
        content:
          application/json:
            schema:
              properties:
                name:
                  description: グループ名(30文字以内)
                  type: string
                description:
                  description: 説明
                  type: string
                adminUserId:
                  description: 管理ユーザー
                  format: uuid
                  type: string
              type: object
      responses:
        204:
          description: 正常に変更できました
        400:
          description: 正常に変更できませんでした。リクエスト内容が不正です
        403:
          description: 正常に変更できませんでした。権限がありません。
        404:
          description: 正常に変更できませんでした。指定したグループは存在しません。
        409:
          description: 正常に変更できませんでした。既に存在するグループ名です
      security:
      - traqOAuth2:
        - write
      tags:
      - user group
  /groups/{groupID}/members:
    get:
      description: ユーザーグループのメンバーのIDを取得します
      parameters:
      - description: 操作の対象となるユーザーグループID
        explode: false
        in: path
        name: groupID
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UUIDs'
          description: 正常に取得できました
        404:
          description: 正常に取得できませんでした。指定したグループは存在しません。
      security:
      - traqOAuth2:
        - read
      tags:
      - user group
    post:
      description: ユーザーグループにメンバーを追加します
      parameters:
      - description: 操作の対象となるユーザーグループID
        explode: false
        in: path
        name: groupID
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/inline_object_30'
        content:
          application/json:
            schema:
              properties:
                userId:
                  description: 追加するユーザーのID
                  format: uuid
                  type: string
              required:
              - userId
              type: object
      responses:
        204:
          description: 正常に追加できました
        400:
          description: 正常に追加できませんでした。リクエスト内容が不正です
        403:
          description: 正常に追加できませんでした。権限がありません。
        404:
          description: 正常に追加できませんでした。指定したグループは存在しません。
      security:
      - traqOAuth2:
        - write
      tags:
      - user group
  /groups/{groupID}/members/{userID}:
    delete:
      description: ユーザーグループからメンバーを削除します
      parameters:
      - description: 操作の対象となるユーザーグループID
        explode: false
        in: path
        name: groupID
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: 操作の対象となるユーザーID
        explode: false
        in: path
        name: userID
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        204:
          description: 正常に削除できました
        400:
          description: 正常に追加できませんでした。リクエスト内容が不正です
        403:
          description: 正常に削除できませんでした。権限がありません。
        404:
          description: 正常に削除できませんでした。指定したグループは存在しません。
      security:
      - traqOAuth2:
        - write
      tags:
      - user group
  /clients:
    get:
      description: 自分が登録しているクライアントの一覧を取得します。
      responses:
        200:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/OwnedClientInfo'
                type: array
          description: 正常に取得できました。
        403:
          description: 取得できませんでした。権限がありません。
      tags:
      - client
    post:
      description: クライアントを登録します。
      requestBody:
        $ref: '#/components/requestBodies/inline_object_31'
        content:
          application/json:
            schema:
              properties:
                name:
                  description: クライアント名(1-32文字)
                  type: string
                description:
                  description: クライアントの説明
                  type: string
                redirectUri:
                  description: リダイレクト先のURI
                  format: uri
                  type: string
                scopes:
                  description: 要求するスコープ(必ず１つ以上)
                  items:
                    type: string
                  type: array
              required:
              - description
              - name
              - redirectUri
              - scopes
              type: object
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OwnedClientInfo'
          description: 正常に登録できました。クライアント情報を返します。
        400:
          description: 登録できませんでした。リクエスト内容が不正です。
        403:
          description: 登録できませんでした。権限がありません。
      tags:
      - client
  /clients/{clientID}:
    delete:
      description: |
        指定したクライアントIDのクライアントを削除します。
        正常に削除された場合、このクライアントを通じての認可は全て取り消されます。
      parameters:
      - description: 操作の対象となるclientのID
        explode: false
        in: path
        name: clientID
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        204:
          description: 正常に削除できました。
        403:
          description: 削除できませんでした。権限がありません。
        404:
          description: 削除できませんでした。指定されたクライアントは存在しません。
      tags:
      - client
    get:
      description: 指定したクライアントIDのクライアントの情報を取得します。
      parameters:
      - description: 操作の対象となるclientのID
        explode: false
        in: path
        name: clientID
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientInfo'
          description: 正常に取得できました。
        404:
          description: 取得できませんでした。指定されたクライアントは存在しません。
      tags:
      - client
    patch:
      description: 指定したクライアントIDのクライアントの情報を変更します。
      parameters:
      - description: 操作の対象となるclientのID
        explode: false
        in: path
        name: clientID
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/inline_object_32'
        content:
          application/json:
            schema:
              properties:
                name:
                  description: クライアント名(1-32文字)
                  type: string
                description:
                  description: 説明
                  type: string
                redirectUri:
                  description: リダイレクト先のURI
                  format: uri
                  type: string
              type: object
      responses:
        204:
          description: 正常に変更できました。
        403:
          description: 変更できませんでした。権限がありません。
        404:
          description: 変更できませんでした。指定されたクライアントは存在しません。
      tags:
      - client
  /clients/{clientID}/detail:
    get:
      description: クライアントの詳細を取得します。
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OwnedClientInfo'
          description: 正常に取得できました。
        403:
          description: 取得できませんでした。権限がありません。
      tags:
      - client
  /bots:
    get:
      description: 自分が作成したBotの一覧を取得します。
      responses:
        200:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Bot'
                type: array
          description: 正常に取得できました。
      security:
      - traqOAuth2:
        - read
        - manage_bot
      tags:
      - bot
    post:
      description: Botを作成します。
      requestBody:
        $ref: '#/components/requestBodies/inline_object_33'
        content:
          application/json:
            schema:
              properties:
                name:
                  description: botユーザーID(16文字まで)。自動的に先頭に"BOT_"が付与されます
                  type: string
                displayName:
                  description: botユーザーの表示名(32文字まで)
                  type: string
                description:
                  description: botの説明
                  type: string
                postUrl:
                  description: botのPOSTエンドポイント
                  format: url
                  type: string
              required:
              - description
              - displayName
              - name
              - postUrl
              type: object
      responses:
        201:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BotDetail'
          description: 正常に作成できました。
        400:
          description: 作成できませんでした。リクエスト内容が不正です。
        409:
          description: 作成できませんでした。既に名前が使われています。
        403:
          description: 作成できませんでした。権限がありません。
      security:
      - traqOAuth2:
        - manage_bot
      tags:
      - bot
  /bots/{botID}:
    delete:
      description: Botを削除します。
      parameters:
      - description: 操作の対象となるBotのID
        explode: false
        in: path
        name: botID
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        204:
          description: 正常に削除できました。
        403:
          description: 削除できませんでした。権限がありません。
        404:
          description: 削除できませんでした。指定したBotは存在しません。
      security:
      - traqOAuth2:
        - manage_bot
      tags:
      - bot
    get:
      description: Botを取得します。
      parameters:
      - description: 操作の対象となるBotのID
        explode: false
        in: path
        name: botID
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bot'
          description: 正常に取得できました。
        404:
          description: 取得できませんでした。指定したBotは存在しません。
      security:
      - traqOAuth2:
        - read
        - manage_bot
      tags:
      - bot
    patch:
      description: Bot情報を変更します。
      parameters:
      - description: 操作の対象となるBotのID
        explode: false
        in: path
        name: botID
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/inline_object_34'
        content:
          application/json:
            schema:
              properties:
                displayName:
                  description: Bot表示名
                  type: string
                description:
                  description: Bot説明
                  type: string
                privileged:
                  description: privileged属性
                  type: boolean
                webhookUrl:
                  description: BotのPOSTエンドポイント
                  format: url
                  type: string
              type: object
      responses:
        204:
          description: 正常に変更できました。
        400:
          description: 変更できませんでした。リクエスト内容が不正です。
        403:
          description: 変更できませんでした。権限がありません。
        404:
          description: 削除できませんでした。指定したBotは存在しません。
      security:
      - traqOAuth2:
        - manage_bot
      tags:
      - bot
  /bots/{botID}/detail:
    get:
      description: Botの詳細を取得します。
      parameters:
      - description: 操作の対象となるBotのID
        explode: false
        in: path
        name: botID
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BotDetail'
          description: 正常に取得できました。
        403:
          description: 取得できませんでした。権限がありません。
        404:
          description: 取得できませんでした。指定したBotは存在しません。
      security:
      - traqOAuth2:
        - read
        - manage_bot
      tags:
      - bot
  /bots/{botID}/events:
    put:
      description: Botの購読イベントを変更します。
      parameters:
      - description: 操作の対象となるBotのID
        explode: false
        in: path
        name: botID
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/inline_object_35'
        content:
          application/json:
            schema:
              properties:
                events:
                  description: 購読するイベントの配列
                  items:
                    type: string
                  type: array
              required:
              - events
              type: object
      responses:
        204:
          description: 変更できました。
        400:
          description: リクエスト内容が不正です。
        403:
          description: 権限がありません。
        404:
          description: 指定したBotは存在しません。
      security:
      - traqOAuth2:
        - manage_bot
      tags:
      - bot
  /bots/{botID}/icon:
    get:
      description: 指定したBotのアイコンを取得します。
      parameters:
      - description: 操作の対象となるBotのID
        explode: false
        in: path
        name: botID
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        200:
          content:
            image/jpeg:
              schema:
                format: binary
                type: string
            image/png:
              schema:
                format: binary
                type: string
            image/gif:
              schema:
                format: binary
                type: string
          description: 正常に取得できました。
        404:
          description: 取得できませんでした。指定したBotは存在しません。
      security:
      - traqOAuth2:
        - read
        - manage_bot
      tags:
      - bot
    put:
      description: 指定したBotのアイコンを変更します。
      parameters:
      - description: 操作の対象となるBotのID
        explode: false
        in: path
        name: botID
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          multipart/form-data:
            encoding:
              file:
                contentType: image/png, image/jpeg, image/gif
                style: form
            schema:
              properties:
                file:
                  description: Botユーザーのアイコン(1MBまでのpng, jpeg, gif)
                  format: binary
                  type: string
      responses:
        204:
          description: 正常に変更できました。
        400:
          description: 変更できませんでした。リクエスト内容が不正です。
        403:
          description: 変更できませんでした。権限がありません。
        404:
          description: 修正できませんでした。指定したBotは存在しません。
      security:
      - traqOAuth2:
        - manage_bot
      tags:
      - bot
  /bots/{botID}/state:
    put:
      description: Botの状態を変更します。
      parameters:
      - description: 操作の対象となるBotのID
        explode: false
        in: path
        name: botID
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/inline_object_36'
        content:
          application/json:
            schema:
              properties:
                state:
                  description: activeまたはinactive
                  type: string
              required:
              - state
              type: object
      responses:
        204:
          description: 変更できました。
        202:
          description: Botのアクティベーションを受理しました。PINGリクエストが通り次第有効になります。
        400:
          description: リクエスト内容が不正です。
        403:
          description: 権限がありません。
        404:
          description: 指定したBotは存在しません。
      security:
      - traqOAuth2:
        - manage_bot
      tags:
      - bot
  /bots/{botID}/reissue:
    post:
      description: Botの各種トークンを再発行します。
      parameters:
      - description: 操作の対象となるBotのID
        explode: false
        in: path
        name: botID
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_11'
          description: 再発行しました
        403:
          description: 権限がありません。
        404:
          description: 指定したBotは存在しません。
      security:
      - traqOAuth2:
        - manage_bot
      tags:
      - bot
  /bots/{botID}/channels:
    get:
      description: Botが参加しているチャンネルのUUIDの配列を取得します。
      parameters:
      - description: 操作の対象となるBotのID
        explode: false
        in: path
        name: botID
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UUIDs'
          description: 正常に取得できました。
        403:
          description: 権限がありません。
        404:
          description: 指定したBotは存在しません。
      security:
      - traqOAuth2:
        - read
        - manage_bot
      tags:
      - bot
  /activity/latest-messages:
    get:
      description: 各チャンネルの最新のメッセージ１件をメッセージ作成日時の降順で取得します。
      parameters:
      - description: 取得する件数 1-50
        example: 50
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 50
          type: integer
        style: form
      - description: 購読チャンネルのみを取得する
        example: false
        explode: true
        in: query
        name: subscribe
        required: false
        schema:
          default: true
          type: boolean
        style: form
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageList'
          description: 正常に取得ができました
        400:
          description: リクエスト内容が不正です
      security:
      - traqOAuth2:
        - read
      tags:
      - activity
components:
  headers:
    X-TRAQ-MORE:
      description: 指定した範囲に要素がさらに存在するかどうか
      explode: false
      schema:
        type: boolean
      style: simple
  parameters:
    channelIdInPath:
      description: 操作の対象となるチャンネルのID
      explode: false
      in: path
      name: channelID
      required: true
      schema:
        format: uuid
        type: string
      style: simple
    userIdInPath:
      description: 操作の対象となるユーザーID
      explode: false
      in: path
      name: userID
      required: true
      schema:
        format: uuid
        type: string
      style: simple
    groupIdInPath:
      description: 操作の対象となるユーザーグループID
      explode: false
      in: path
      name: groupID
      required: true
      schema:
        format: uuid
        type: string
      style: simple
    messageIdInPath:
      description: 操作の対象となるメッセージID
      explode: false
      in: path
      name: messageID
      required: true
      schema:
        format: uuid
        type: string
      style: simple
    stampIdInPath:
      description: 操作の対象となるスタンプID
      explode: false
      in: path
      name: stampID
      required: true
      schema:
        format: uuid
        type: string
      style: simple
    tagIdInPath:
      description: 操作の対象となるタグID
      explode: false
      in: path
      name: tagID
      required: true
      schema:
        format: uuid
        type: string
      style: simple
    fileIdInPath:
      description: 操作の対象となるファイルID
      explode: false
      in: path
      name: fileID
      required: true
      schema:
        type: string
      style: simple
    pinIdInPath:
      description: 操作の対象となるピン留めID
      explode: false
      in: path
      name: pinID
      required: true
      schema:
        type: string
      style: simple
    clipIdInPath:
      description: 捜査の対象となるクリップのID
      explode: false
      in: path
      name: clipID
      required: true
      schema:
        type: string
      style: simple
    webhookIdInPath:
      description: 操作の対象となるWebhookのID
      explode: false
      in: path
      name: webhookID
      required: true
      schema:
        format: uuid
        type: string
      style: simple
    botIdInPath:
      description: 操作の対象となるBotのID
      explode: false
      in: path
      name: botID
      required: true
      schema:
        format: uuid
        type: string
      style: simple
    clientIdInPath:
      description: 操作の対象となるclientのID
      explode: false
      in: path
      name: clientID
      required: true
      schema:
        format: uuid
        type: string
      style: simple
    oauth2TokenIdInPath:
      description: 操作の対象となるTokenのID
      explode: false
      in: path
      name: oauth2TokenID
      required: true
      schema:
        format: uuid
        type: string
      style: simple
    limitInQuery:
      description: 取得する件数 1-200
      example: 50
      explode: true
      in: query
      name: limit
      required: false
      schema:
        default: 0
        type: integer
      style: form
    offsetInQuery:
      description: 取得するオフセット
      example: 150
      explode: true
      in: query
      name: offset
      required: false
      schema:
        default: 0
        type: integer
      style: form
    sinceInQuery:
      description: 取得する時間範囲の開始日時
      example: 2016-10-12T11:00:00.000000Z
      explode: true
      in: query
      name: since
      required: false
      schema:
        default: +0000-01-01T00:00:00.000+0000
        format: date-time
        type: string
      style: form
    untilInQuery:
      description: 取得する時間範囲の終了日時
      example: 2016-10-12T11:00:00.0000000Z
      explode: true
      in: query
      name: until
      required: false
      schema:
        default: +10000-01-01T00:00:39.999+0000
        format: date-time
        type: string
      style: form
    inclusiveInQuery:
      description: 範囲の端を含めるかどうか
      explode: true
      in: query
      name: inclusive
      required: false
      schema:
        default: false
        type: boolean
      style: form
    orderInQuery:
      description: 昇順か降順か
      explode: true
      in: query
      name: order
      required: false
      schema:
        default: desc
        enum:
        - asc
        - desc
        type: string
      style: form
  requestBodies:
    inline_object_30:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_30'
    inline_object_10:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_10'
    inline_object_32:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_32'
    inline_object_31:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_31'
    inline_object_12:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_12'
    inline_object_34:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_34'
    inline_object_11:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_11'
    inline_object_33:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_33'
    inline_object_14:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_14'
    inline_object_36:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_36'
    inline_object_13:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_13'
    inline_object_35:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_35'
    inline_object_16:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_16'
    inline_object_15:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_15'
    inline_object_29:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_29'
    inline_object_28:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_28'
    inline_object_1:
      content:
        application/x-www-form-urlencoded:
          schema:
            $ref: '#/components/schemas/inline_object_1'
    inline_object_9:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_9'
    inline_object_21:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_21'
    inline_object_8:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_8'
    inline_object_20:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_20'
    inline_object_7:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_7'
    inline_object_23:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_23'
    inline_object_6:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_6'
    inline_object_22:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_22'
    inline_object_5:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_5'
    inline_object_25:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_25'
    inline_object_4:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_4'
    inline_object_24:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_24'
    inline_object_3:
      content:
        application/x-www-form-urlencoded:
          schema:
            $ref: '#/components/schemas/inline_object_3'
    inline_object_27:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_27'
    inline_object_2:
      content:
        application/x-www-form-urlencoded:
          schema:
            $ref: '#/components/schemas/inline_object_2'
    inline_object_26:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_26'
    inline_object_18:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_18'
    inline_object_17:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_17'
    inline_object_19:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_19'
    inline_object:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object'
  schemas:
    UUIDs:
      description: UUIDの配列
      items:
        format: uuid
        type: string
      type: array
    Channel:
      example:
        parent: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        private: true
        visibility: true
        children:
        - 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        - 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        name: yamada
        member:
        - 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        - 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        topic: yamadaチャンネルです！
        dm: true
        force: true
        channelId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        channelId:
          description: チャンネルUUID
          format: uuid
          type: string
        name:
          description: チャンネル名
          example: yamada
          type: string
        member:
          description: privateチャンネルの場合は参加しているメンバー、公開チャンネルの場合は空
          items:
            format: uuid
            type: string
          type: array
        parent:
          description: 親の階層のチャンネルUUID
          format: uuid
          type: string
        topic:
          description: チャンネルトピック
          example: yamadaチャンネルです！
          type: string
        children:
          description: 子のチャンネルUUIDの配列
          items:
            format: uuid
            type: string
          type: array
        visibility:
          description: チャンネルの可視状態
          type: boolean
        force:
          description: 強制通知チャンネルか
          type: boolean
        private:
          description: プライベートチャンネルか
          type: boolean
        dm:
          description: ダイレクトメッセージチャンネルか
          type: boolean
      type: object
    ChannelList:
      items:
        $ref: '#/components/schemas/Channel'
      type: array
    User:
      example:
        accountStatus: 0
        iconFileId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        displayName: displayName
        bot: true
        name: name
        lastOnline: 2000-01-23T04:56:07.000+00:00
        isOnline: true
        userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        twitterId: twitterId
        suspended: true
      properties:
        userId:
          description: ユーザーUUID
          format: uuid
          type: string
        name:
          description: traQ ID
          type: string
        displayName:
          description: 表示名
          type: string
        iconFileId:
          description: アイコンファイルUUID
          format: uuid
          type: string
        bot:
          description: BOTかどうか
          type: boolean
        twitterId:
          description: ツイッターID
          type: string
        lastOnline:
          description: 最終オンライン日時(オンラインに１度もなってない場合はnull)
          format: date-time
          type: string
        isOnline:
          description: 現在オンラインかどうか
          type: boolean
        suspended:
          description: アカウントが停止中かどうか
          type: boolean
        accountStatus:
          description: アカウントの状態 (0:停止,1:有効,2:一時停止)
          type: integer
      type: object
    Me:
      example:
        accountStatus: 0
        iconFileId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        role: role
        displayName: displayName
        bot: true
        permissions:
        - permissions
        - permissions
        name: name
        lastOnline: 2000-01-23T04:56:07.000+00:00
        isOnline: true
        userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        twitterId: twitterId
        suspended: true
      properties:
        userId:
          description: ユーザーUUID
          format: uuid
          type: string
        name:
          description: traQ ID
          type: string
        displayName:
          description: 表示名
          type: string
        iconFileId:
          description: アイコンファイルUUID
          format: uuid
          type: string
        bot:
          description: BOTかどうか
          type: boolean
        twitterId:
          description: ツイッターID
          type: string
        lastOnline:
          description: 最終オンライン日時(オンラインに１度もなってない場合はnull)
          format: date-time
          type: string
        isOnline:
          description: 現在オンラインかどうか
          type: boolean
        suspended:
          description: アカウントが停止中かどうか
          type: boolean
        accountStatus:
          description: アカウントの状態 (0:停止,1:有効,2:一時停止)
          type: integer
        role:
          description: ユーザーロール
          type: string
        permissions:
          description: 所有している権限の配列
          items:
            type: string
          type: array
      type: object
    UserList:
      items:
        $ref: '#/components/schemas/User'
      type: array
    UserDetail:
      example:
        accountStatus: 0
        tagList:
        - createdAt: 2000-01-23T04:56:07.000+00:00
          tagId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          isLocked: true
          tag: tag
          updatedAt: 2000-01-23T04:56:07.000+00:00
        - createdAt: 2000-01-23T04:56:07.000+00:00
          tagId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          isLocked: true
          tag: tag
          updatedAt: 2000-01-23T04:56:07.000+00:00
        iconFileId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        displayName: displayName
        bot: true
        name: name
        lastOnline: 2000-01-23T04:56:07.000+00:00
        isOnline: true
        userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        twitterId: twitterId
        suspended: true
      properties:
        userId:
          description: ユーザーUUID
          format: uuid
          type: string
        name:
          description: traQ ID
          type: string
        displayName:
          description: 表示名
          type: string
        iconFileId:
          description: アイコンファイルUUID
          format: uuid
          type: string
        bot:
          description: BOTかどうか
          type: boolean
        twitterId:
          description: ツイッターID
          type: string
        lastOnline:
          description: 最終オンライン日時(オンラインに１度もなってない場合はnull)
          format: date-time
          type: string
        isOnline:
          description: 現在オンラインかどうか
          type: boolean
        suspended:
          description: アカウントが停止中かどうか
          type: boolean
        accountStatus:
          description: アカウントの状態 (0:停止,1:有効,2:一時停止)
          type: integer
        tagList:
          items:
            $ref: '#/components/schemas/Tag'
          type: array
      type: object
    UserGroup:
      example:
        adminUserId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        createdAt: 2000-01-23T04:56:07.000+00:00
        groupId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        members:
        - 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        - 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        name: name
        description: description
        type: type
        updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        groupId:
          description: グループUUID
          format: uuid
          type: string
        name:
          description: グループ名
          type: string
        description:
          description: グループ説明
          type: string
        type:
          description: グループタイプ
          type: string
        adminUserId:
          description: グループ管理者UUID
          format: uuid
          type: string
        members:
          description: UUIDの配列
          items:
            format: uuid
            type: string
          type: array
        createdAt:
          description: グループ作成日時
          format: date-time
          type: string
        updatedAt:
          description: グループ更新日時
          format: date-time
          type: string
      type: object
    Tag:
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        tagId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        isLocked: true
        tag: tag
        updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        tagId:
          description: タグUUID
          format: uuid
          type: string
        tag:
          description: タグ文字列
          type: string
        isLocked:
          description: タグがロックされているかどうか
          type: boolean
        createdAt:
          description: タグ付与日時
          format: date-time
          type: string
        updatedAt:
          description: タグ更新日時
          format: date-time
          type: string
      type: object
    TagList:
      items:
        $ref: '#/components/schemas/Tag'
      type: array
    Message:
      example:
        stampList:
        - createdAt: 2000-01-23T04:56:07.000+00:00
          stampId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          count: 0
          userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          updatedAt: 2000-01-23T04:56:07.000+00:00
        - createdAt: 2000-01-23T04:56:07.000+00:00
          stampId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          count: 0
          userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          updatedAt: 2000-01-23T04:56:07.000+00:00
        parentChannelId: parentChannelId
        createdAt: 2000-01-23T04:56:07.000+00:00
        pin: true
        reported: true
        messageId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        content: content
        updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        messageId:
          description: メッセージUUID
          format: uuid
          type: string
        userId:
          description: 投稿者UUID
          format: uuid
          type: string
        parentChannelId:
          description: 投稿先チャンネルUUID
          type: string
        content:
          description: メッセージ本体
          type: string
        createdAt:
          description: メッセージ投稿日時
          format: date-time
          type: string
        updatedAt:
          description: メッセージ更新日時
          format: date-time
          type: string
        pin:
          description: ピン留めされているかどうか
          type: boolean
        reported:
          description: 自分が通報しているかどうか
          type: boolean
        stampList:
          description: メッセージスタンプ配列
          items:
            $ref: '#/components/schemas/MessageStamp'
          type: array
      type: object
    MessageList:
      items:
        $ref: '#/components/schemas/Message'
      type: array
    MessageStamp:
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        stampId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        count: 0
        userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        userId:
          description: ユーザーUUID
          format: uuid
          type: string
        stampId:
          description: スタンプUUID
          format: uuid
          type: string
        count:
          description: 押された個数
          type: integer
        createdAt:
          description: 最初に押した日時
          format: date-time
          type: string
        updatedAt:
          description: 最後に押した日時
          format: date-time
          type: string
      type: object
    Pin:
      example:
        dateTime: 2000-01-23T04:56:07.000+00:00
        pinId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        message:
          stampList:
          - createdAt: 2000-01-23T04:56:07.000+00:00
            stampId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            count: 0
            userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            updatedAt: 2000-01-23T04:56:07.000+00:00
          - createdAt: 2000-01-23T04:56:07.000+00:00
            stampId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            count: 0
            userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            updatedAt: 2000-01-23T04:56:07.000+00:00
          parentChannelId: parentChannelId
          createdAt: 2000-01-23T04:56:07.000+00:00
          pin: true
          reported: true
          messageId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          content: content
          updatedAt: 2000-01-23T04:56:07.000+00:00
        userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        channelId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        pinId:
          description: ピンUUID
          format: uuid
          type: string
        channelId:
          description: チャンネルUUID
          format: uuid
          type: string
        userId:
          description: ピン留めしたユーザーのUUID
          format: uuid
          type: string
        dateTime:
          description: ピン留めした日時
          format: date-time
          type: string
        message:
          $ref: '#/components/schemas/Message'
      type: object
    PinList:
      items:
        $ref: '#/components/schemas/Pin'
      type: array
    Webhook:
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        webhookId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        displayName: displayName
        creatorId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        description: description
        botUserId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        secure: true
        channelId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        webhookId:
          description: Webhook UUID
          format: uuid
          type: string
        botUserId:
          description: WebhookユーザーのUUID
          format: uuid
          type: string
        displayName:
          description: Webhookユーザー表示名
          type: string
        description:
          description: Webhook説明
          type: string
        secure:
          description: Secure Webhookかどうか
          type: boolean
        channelId:
          description: デフォルト投稿先チャンネルUUID
          format: uuid
          type: string
        creatorId:
          description: Webhook作成者UUID
          format: uuid
          type: string
        createdAt:
          description: Webhook作成日時
          format: date-time
          type: string
        updatedAt:
          description: Webhook更新日時
          format: date-time
          type: string
      type: object
    Bot:
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        subscribeEvents:
        - subscribeEvents
        - subscribeEvents
        creatorId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        description: description
        botUserId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        botId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        state: 0
        updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        botId:
          description: BOT UUID
          format: uuid
          type: string
        botUserId:
          description: BOTユーザーUUID
          format: uuid
          type: string
        description:
          description: BOT説明
          type: string
        subscribeEvents:
          description: BOTが購読しているイベントの配列
          items:
            type: string
          type: array
        state:
          description: BOT状態
          type: integer
        creatorId:
          description: BOT作成者UUID
          format: uuid
          type: string
        createdAt:
          description: BOT作成日時
          format: date-time
          type: string
        updatedAt:
          description: BOT更新日時
          format: date-time
          type: string
      type: object
    BotDetail:
      example:
        postUrl: https://example.com/bot
        creatorId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        description: description
        accessToken: NT672c7bgpfwdiMTyDXoeKiudlMazu
        verificationCode: NT672c7bgpfwdiMTyDXoeKiudlMazu
        privileged: true
        createdAt: 2000-01-23T04:56:07.000+00:00
        subscribeEvents:
        - subscribeEvents
        - subscribeEvents
        botUserId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        botId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        state: 0
        botCode: NT672c7bgpfwdiMTyDXoeKiudlMazu
        updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        botId:
          description: BOT UUID
          format: uuid
          type: string
        botUserId:
          description: BOTユーザーUUID
          format: uuid
          type: string
        description:
          description: BOT説明
          type: string
        subscribeEvents:
          description: BOTが購読しているイベントの配列
          items:
            type: string
          type: array
        state:
          description: BOT状態
          type: integer
        creatorId:
          description: BOT作成者UUID
          format: uuid
          type: string
        createdAt:
          description: BOT作成日時
          format: date-time
          type: string
        updatedAt:
          description: BOT更新日時
          format: date-time
          type: string
        verificationCode:
          description: BOT認証コード
          example: NT672c7bgpfwdiMTyDXoeKiudlMazu
          type: string
        accessToken:
          description: BOTアクセストークン
          example: NT672c7bgpfwdiMTyDXoeKiudlMazu
          type: string
        postUrl:
          description: BOTサーバーエンドポイント
          example: https://example.com/bot
          format: uri
          type: string
        privileged:
          description: 権限昇格されているかどうか
          type: boolean
        botCode:
          description: BOTインストールコード
          example: NT672c7bgpfwdiMTyDXoeKiudlMazu
          type: string
      type: object
    Stamp:
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        name: name
        creatorId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        fileId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        id:
          description: スタンプUUID
          format: uuid
          type: string
        name:
          description: スタンプ名
          type: string
        creatorId:
          description: スタンプ作成者UUID
          format: uuid
          type: string
        fileId:
          description: スタンプファイルUUID
          format: uuid
          type: string
        createdAt:
          description: スタンプ作成日時
          format: date-time
          type: string
        updatedAt:
          description: スタンプ更新日時
          format: date-time
          type: string
      type: object
    FileInfo:
      example:
        thumbHeight: 1
        datetime: 2000-01-23T04:56:07.000+00:00
        size: 0
        mime: mime
        name: name
        hasThumb: true
        thumbWidth: 6
        fileId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        md5: md5
      properties:
        fileId:
          description: ファイルUUID
          format: uuid
          type: string
        name:
          description: ファイル名
          type: string
        mime:
          description: MIMEタイプ
          type: string
        size:
          description: ファイルサイズ
          type: integer
        md5:
          description: MD5ハッシュ
          type: string
        hasThumb:
          description: サムネイルがあるかどうか
          type: boolean
        thumbWidth:
          description: サムネイル幅
          type: integer
        thumbHeight:
          description: サムネイル高さ
          type: integer
        datetime:
          description: アップロード日時
          format: date-time
          type: string
      type: object
    HeartbeatRes:
      example:
        userStatuses:
        - userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          status: monitoring
        - userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          status: monitoring
        channelId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        userStatuses:
          items:
            $ref: '#/components/schemas/HeartbeatRes_userStatuses'
          type: array
        channelId:
          description: チャンネルUUID
          format: uuid
          type: string
      type: object
    ClipsFolder:
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        name: name
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        id:
          description: フォルダUUID
          format: uuid
          type: string
        name:
          description: フォルダ名
          type: string
        createdAt:
          description: フォルダ作成日時
          format: date-time
          type: string
      type: object
    ClientInfo:
      example:
        clientId: clientId
        name: name
        creatorId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        description: description
      properties:
        clientId:
          description: クライアントID
          type: string
        name:
          description: クライアント名
          type: string
        description:
          description: クライアント説明
          type: string
        creatorId:
          description: クライアント作成者UUID
          format: uuid
          type: string
      type: object
    OwnedClientInfo:
      example:
        redirectUri: https://openapi-generator.tech
        clientId: clientId
        name: name
        creatorId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        description: description
        scopes:
        - scopes
        - scopes
        secret: secret
      properties:
        clientId:
          description: クライアントID
          type: string
        name:
          description: クライアント名
          type: string
        description:
          description: クライアント説明
          type: string
        creatorId:
          description: クライアント作成者UUID
          format: uuid
          type: string
        scopes:
          description: 要求スコープの配列
          items:
            type: string
          type: array
        redirectUri:
          description: OAuth2リダイレクトURL
          format: uri
          type: string
        secret:
          description: クライアントSecret
          type: string
      type: object
    AllowedClientInfo:
      example:
        clientId: clientId
        tokenId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        name: name
        creatorId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        description: description
        scopes:
        - scopes
        - scopes
        approvedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        tokenId:
          description: OAuth2アクセストークンUUID
          format: uuid
          type: string
        clientId:
          description: クライアントID
          type: string
        name:
          description: クライアント名
          type: string
        description:
          description: クライアント説明
          type: string
        creatorId:
          description: クライアント作成者UUID
          format: uuid
          type: string
        scopes:
          description: 要求スコープの配列
          items:
            type: string
          type: array
        approvedAt:
          description: 承認日時
          format: date-time
          type: string
      type: object
    inline_object:
      properties:
        name:
          type: string
        pass:
          type: string
      required:
      - name
      - pass
      type: object
    inline_object_1:
      properties:
        response_type:
          type: string
        client_id:
          type: string
        redirect_uri:
          type: string
        scope:
          type: string
        state:
          type: string
        code_challenge:
          type: string
        code_challenge_method:
          type: string
        nonce:
          type: string
        prompt:
          type: string
      type: object
    inline_object_2:
      properties:
        submit:
          description: 承諾する場合は"approve"
          type: string
      required:
      - submit
      type: object
    inline_object_3:
      properties:
        grant_type:
          type: string
        code:
          type: string
        redirect_uri:
          type: string
        client_id:
          type: string
        code_verifier:
          type: string
        username:
          type: string
        password:
          type: string
        scope:
          type: string
        refresh_token:
          type: string
        client_secret:
          type: string
      required:
      - grant_type
      type: object
    inline_response_200:
      example:
        access_token: access_token
        refresh_token: refresh_token
        scope: scope
        id_token: id_token
        token_type: token_type
        expires_in: 0
      properties:
        access_token:
          type: string
        token_type:
          type: string
        expires_in:
          type: integer
        refresh_token:
          type: string
        scope:
          type: string
        id_token:
          type: string
      required:
      - access_token
      - token_type
    inline_object_4:
      properties:
        name:
          description: ユーザー名(半角英数字とアンダーバー(_)の1文字以上32文字以下)
          type: string
        password:
          description: パスワード
          format: password
          type: string
      required:
      - name
      - password
      type: object
    inline_object_5:
      properties:
        displayName:
          description: 新しい表示名(0-32文字)。変更しない場合は""
          type: string
        twitterId:
          description: TwitterID
          type: string
      type: object
    inline_object_6:
      properties:
        password:
          description: 現在のパスワード
          type: string
        newPassword:
          description: 新しいパスワード(10文字以上32文字以下のアスキー文字)
          type: string
      required:
      - newPassword
      - password
      type: object
    inline_response_200_1:
      example:
        datetime: 2000-01-23T04:56:07.000+00:00
        stampId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        stampId:
          description: スタンプID
          format: uuid
          type: string
        datetime:
          description: そのスタンプが最後に押された日時
          format: date-time
          type: string
    inline_response_200_2:
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        lastIP: lastIP
        lastUserAgent: lastUserAgent
        lastAccess: 2000-01-23T04:56:07.000+00:00
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        id:
          format: uuid
          type: string
        lastIP:
          type: string
        lastUserAgent:
          type: string
        lastAccess:
          format: date-time
          type: string
        createdAt:
          format: date-time
          type: string
    inline_response_200_3:
      example:
        clipId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        message:
          stampList:
          - createdAt: 2000-01-23T04:56:07.000+00:00
            stampId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            count: 0
            userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            updatedAt: 2000-01-23T04:56:07.000+00:00
          - createdAt: 2000-01-23T04:56:07.000+00:00
            stampId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            count: 0
            userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            updatedAt: 2000-01-23T04:56:07.000+00:00
          parentChannelId: parentChannelId
          createdAt: 2000-01-23T04:56:07.000+00:00
          pin: true
          reported: true
          messageId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          content: content
          updatedAt: 2000-01-23T04:56:07.000+00:00
        folderId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        clippedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        folderId:
          description: フォルダID
          format: uuid
          type: string
        clipId:
          description: クリップID
          format: uuid
          type: string
        clippedAt:
          description: クリップ日時
          format: date-time
          type: string
        message:
          $ref: '#/components/schemas/Message'
    inline_object_7:
      properties:
        messageId:
          description: クリップするメッセージID
          format: uuid
          type: string
        folderId:
          description: クリップフォルダ名
          format: uuid
          type: string
      required:
      - messageId
      type: object
    inline_response_201:
      example:
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        id:
          description: クリップID
          format: uuid
          type: string
    inline_object_8:
      properties:
        folderId:
          description: フォルダID
          format: uuid
          type: string
      required:
      - folderId
      type: object
    inline_object_9:
      properties:
        name:
          description: フォルダ名(30文字以内)
          type: string
      required:
      - name
      type: object
    inline_response_200_4:
      example:
        clipId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        message:
          stampList:
          - createdAt: 2000-01-23T04:56:07.000+00:00
            stampId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            count: 0
            userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            updatedAt: 2000-01-23T04:56:07.000+00:00
          - createdAt: 2000-01-23T04:56:07.000+00:00
            stampId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            count: 0
            userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            updatedAt: 2000-01-23T04:56:07.000+00:00
          parentChannelId: parentChannelId
          createdAt: 2000-01-23T04:56:07.000+00:00
          pin: true
          reported: true
          messageId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          content: content
          updatedAt: 2000-01-23T04:56:07.000+00:00
        clippedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        clipId:
          description: クリップID
          format: uuid
          type: string
        clippedAt:
          description: クリップ日時
          format: date-time
          type: string
        message:
          $ref: '#/components/schemas/Message'
    inline_object_10:
      properties:
        name:
          description: フォルダ名(30文字以内)
          type: string
      required:
      - name
      type: object
    inline_response_200_5:
      example:
        count: 0
        noticeable: true
        channelId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        since: 2000-01-23T04:56:07.000+00:00
        updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        channelId:
          description: チャンネルID
          format: uuid
          type: string
        count:
          description: そのチャンネルの未読メッセージ数
          type: integer
        noticeable:
          description: 自分にメンションされたメッセージを含んでいるかどうか
          type: boolean
        since:
          description: そのチャンネルの最古の未読メッセージの日時
          format: date-time
          type: string
        updatedAt:
          description: そのチャンネルの最新の未読メッセージの日時
          format: date-time
          type: string
    inline_object_11:
      properties:
        text:
          description: Markdown形式のメッセージ本文
          example: Raskって誰？
          type: string
      required:
      - text
      type: object
    inline_object_12:
      properties:
        tag:
          description: 追加するタグ(30文字まで)
          example: 山田太郎
          type: string
      required:
      - tag
      type: object
    inline_object_13:
      properties:
        isLocked:
          description: lockするときはtrue,解除するときはfalse
          example: true
          type: boolean
      required:
      - isLocked
      type: object
    inline_object_14:
      properties:
        private:
          description: プライベートチャンネルかどうか
          type: boolean
        member:
          items:
            description: チャンネルに参加させるuserのuserId
            format: uuid
            type: string
          type: array
        name:
          description: チャンネル名
          example: random
          type: string
        parent:
          description: 親のチャンネルID
          format: uuid
          type: string
      required:
      - type
      type: object
    inline_object_15:
      properties:
        name:
          description: チャンネル名
          example: gps
          type: string
        visibility:
          description: 変更後のvisibility
          example: true
          type: boolean
        force:
          description: 強制通知かどうか
          type: boolean
      type: object
    inline_object_16:
      properties:
        parent:
          description: 変更後の親チャンネルID
          format: uuid
          type: string
      required:
      - parent
      type: object
    inline_object_17:
      properties:
        name:
          description: チャンネル名
          example: random
          type: string
      required:
      - name
      type: object
    inline_response_200_6:
      example:
        text: yamadaチャンネルです！
      properties:
        text:
          description: チャンネルトピック
          example: yamadaチャンネルです！
          type: string
    inline_object_18:
      properties:
        text:
          description: チャンネルの説明
          example: なんでも良いチャンネルです!!
          type: string
      required:
      - text
      type: object
    inline_object_19:
      properties:
        text:
          description: Markdown形式のメッセージ本文
          example: Raskって誰？
          type: string
      required:
      - text
      type: object
    inline_object_20:
      properties:
        on:
          description: 通知をつける人のユーザーIDの配列
          items:
            format: uuid
            type: string
          type: array
        off:
          description: 通知をつけない人のユーザーIDの配列
          items:
            format: uuid
            type: string
          type: array
      type: object
    inline_response_200_7:
      example:
        botUserId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        botId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        botId:
          description: BotのID
          format: uuid
          type: string
        botUserId:
          description: BotのユーザーID
          format: uuid
          type: string
    inline_object_21:
      properties:
        code:
          description: ボットコード
          type: string
      required:
      - code
      type: object
    inline_response_200_8:
      example:
        botId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        botId:
          description: 参加したBotのID
          format: uuid
          type: string
    inline_object_22:
      properties:
        token:
          description: FCMのデバイストークン
          example: bk3RNwTe3H0:CI2k_HHwgIpoDKCIZvvDMExUdFQ3P1
          type: string
      required:
      - token
      type: object
    inline_response_200_9:
      example:
        reason: reason
        createdAt: 2000-01-23T04:56:07.000+00:00
        messageId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        reporter: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        id:
          description: 通報ID
          format: uuid
          type: string
        messageId:
          description: 通報対象のメッセージID
          format: uuid
          type: string
        reporter:
          description: 通報者ID
          format: uuid
          type: string
        reason:
          description: 通報内容
          type: string
        createdAt:
          description: 通報日時
          format: date-time
          type: string
    inline_object_23:
      properties:
        text:
          description: Markdown形式のメッセージ本文
          example: Raskって誰？
          type: string
      required:
      - text
      type: object
    inline_object_24:
      properties:
        reason:
          description: 通報理由(100文字以内)
          type: string
      required:
      - reason
      type: object
    inline_response_200_10:
      example:
        tagId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        tag: tag
        users:
        - 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        - 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        tagId:
          format: uuid
          type: string
        tag:
          type: string
        users:
          description: UUIDの配列
          items:
            format: uuid
            type: string
          type: array
    inline_object_25:
      properties:
        messageId:
          description: ピン留めするメッセージID
          format: uuid
          type: string
      required:
      - messageId
      type: object
    inline_response_201_1:
      example:
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        id:
          description: ピンID
          format: uuid
          type: string
    inline_object_26:
      properties:
        name:
          description: webhookユーザーの表示名(32文字まで)
          type: string
        description:
          description: webhookの説明
          type: string
        channelId:
          description: デフォルトの投稿先チャンネル(パブリックチャンネルのみ)
          format: uuid
          type: string
        secret:
          description: webhookシークレット
          type: string
      required:
      - channelId
      - description
      - name
      type: object
    inline_object_27:
      properties:
        name:
          description: webhookユーザーの表示名(32文字まで)
          type: string
        description:
          description: webhookの説明
          type: string
        channelId:
          description: デフォルトの投稿先チャンネル(パブリックチャンネルのみ)
          format: uuid
          type: string
        secret:
          description: webhookシークレット
          type: string
      type: object
    inline_object_28:
      properties:
        name:
          description: グループ名(30文字以内)
          type: string
        description:
          description: 説明
          type: string
      required:
      - name
      type: object
    inline_object_29:
      properties:
        name:
          description: グループ名(30文字以内)
          type: string
        description:
          description: 説明
          type: string
        adminUserId:
          description: 管理ユーザー
          format: uuid
          type: string
      type: object
    inline_object_30:
      properties:
        userId:
          description: 追加するユーザーのID
          format: uuid
          type: string
      required:
      - userId
      type: object
    inline_object_31:
      properties:
        name:
          description: クライアント名(1-32文字)
          type: string
        description:
          description: クライアントの説明
          type: string
        redirectUri:
          description: リダイレクト先のURI
          format: uri
          type: string
        scopes:
          description: 要求するスコープ(必ず１つ以上)
          items:
            type: string
          type: array
      required:
      - description
      - name
      - redirectUri
      - scopes
      type: object
    inline_object_32:
      properties:
        name:
          description: クライアント名(1-32文字)
          type: string
        description:
          description: 説明
          type: string
        redirectUri:
          description: リダイレクト先のURI
          format: uri
          type: string
      type: object
    inline_object_33:
      properties:
        name:
          description: botユーザーID(16文字まで)。自動的に先頭に"BOT_"が付与されます
          type: string
        displayName:
          description: botユーザーの表示名(32文字まで)
          type: string
        description:
          description: botの説明
          type: string
        postUrl:
          description: botのPOSTエンドポイント
          format: url
          type: string
      required:
      - description
      - displayName
      - name
      - postUrl
      type: object
    inline_object_34:
      properties:
        displayName:
          description: Bot表示名
          type: string
        description:
          description: Bot説明
          type: string
        privileged:
          description: privileged属性
          type: boolean
        webhookUrl:
          description: BotのPOSTエンドポイント
          format: url
          type: string
      type: object
    inline_object_35:
      properties:
        events:
          description: 購読するイベントの配列
          items:
            type: string
          type: array
      required:
      - events
      type: object
    inline_object_36:
      properties:
        state:
          description: activeまたはinactive
          type: string
      required:
      - state
      type: object
    inline_response_200_11:
      example:
        verificationToken: verificationToken
        botCode: botCode
        accessToken: accessToken
      properties:
        verificationToken:
          description: Verification Token
          type: string
        accessToken:
          description: BOTアクセストークン
          type: string
        botCode:
          description: BOTインストールコード
          type: string
    HeartbeatRes_userStatuses:
      example:
        userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        status: monitoring
      properties:
        userId:
          description: ユーザーUUID
          format: uuid
          type: string
        status:
          description: ユーザー状態
          enum:
          - monitoring
          - editing
          - none
          type: string
  securitySchemes:
    cookieAuth:
      in: cookie
      name: r_session
      type: apiKey
    traqOAuth2:
      flows:
        authorizationCode:
          authorizationUrl: /api/1.0/oauth2/authorize
          scopes:
            read: 読み取りスコープ
            write: 書き込みスコープ
            manage_bot: bot関連読み書きスコープ
          tokenUrl: /api/1.0/oauth2/token
      type: oauth2
